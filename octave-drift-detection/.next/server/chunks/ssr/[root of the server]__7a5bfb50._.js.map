{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/fe/octave-drift-detection/src/services/backendService.ts"],"sourcesContent":["// services/backendService.ts\n\nexport interface KPI {\n  rowKey: string\n  value: string\n  status?: string\n}\n\nexport interface PlotDataPoint {\n  x: string\n  y: number\n  exceedsThreshold: boolean\n}\n\nexport interface TableDataPoint {\n  id: string\n  timePeriod: string\n  meanPrediction?: number\n  error?: number\n  percentageError?: number\n  status: string\n  abs_curr_per?: number\n  abs_ref_per?: number\n  difference?: number\n}\n\nexport interface OutletsExceedingThreshold {\n  id: string\n  y_true: number\n  y_pred: number\n  percentage_error: number\n}\n\nexport interface AllOutlets {\n  id: number\n  percentage_error: number\n  y_pred: number\n  y_true: number\n}\n\nexport interface MSETrend {\n  MSE: number\n  time_period: string\n}\n\nexport interface DashboardData {\n  mode: string\n  businessUnit: string\n  useCase: string\n  ShortCode: string\n  alertKeeper: string\n  runtime: number\n}\n\nexport interface StatusDistribution {\n  good: number\n  warning: number\n  error: number\n}\n\nexport interface FetchDataResult {\n  kpis: KPI[]\n  errors: {\n    plotData: PlotDataPoint[]\n    tableData: TableDataPoint[]\n  }\n  outletsExceedingThreshold: OutletsExceedingThreshold[]\n  xaiExplanation: string\n  currentPeriod: string\n  referencePeriod: string\n  error_percentage_threshold: number\n  dashboardData: DashboardData\n  all_outlets: AllOutlets[]\n  mse_trend: MSETrend[]\n  sorted_periods: string[]\n  driftDetected: boolean\n  filtered_data?: any[]\n  status_distribution: StatusDistribution\n}\n\nexport async function fetchData(\n  { runtime }: { runtime: string } = { runtime: \"\" }\n): Promise<FetchDataResult> {\n  try {\n    // 1. Fetch drift data\n    const resp = await fetch(`/api/mode1/data${runtime ? `?runtime=${runtime}` : \"\"}`, {\n      credentials: \"include\",\n    })\n    if (!resp.ok) {\n      throw new Error(`HTTP error! Status: ${resp.status}`)\n    }\n    const rawData: any = await resp.json()\n\n    // 2. Fetch dashboard config\n    const dashResp = await fetch(`/dashboard.json`)\n    if (!dashResp.ok) {\n      throw new Error(`HTTP error fetching dashboard.json! Status: ${dashResp.status}`)\n    }\n    const dashboardData: DashboardData = await dashResp.json()\n\n    // 3. Extract drift metrics\n    const driftMetrics = rawData.drift_state?.metrics || {}\n    const driftDetected = rawData.drift_state?.drift_detected ?? false\n    const sorted_periods: string[] = rawData.sorted_periods ?? []\n    const referencePeriod = sorted_periods.length > 0 ? sorted_periods[0] : \"N/A\"\n\n    // 4. Build KPI list\n    const kpis: KPI[] = [\n      {\n        rowKey: \"Drift Detected\",\n        value: driftDetected ? \"Yes\" : \"No\",\n        status: driftDetected ? \"Alert\" : \"Normal\",\n      },\n      {\n        rowKey: \"Error Percentage Threshold\",\n        value: String(rawData.error_percentage_threshold ?? \"N/A\"),\n        status: \"Normal\",\n      },\n      {\n        rowKey: \"Average Percentage Error (All)\",\n        value:\n          rawData.average_percentage_error_all != null\n            ? rawData.average_percentage_error_all.toFixed(2)\n            : \"N/A\",\n        status: \"Normal\",\n      },\n      {\n        rowKey: \"Average Percentage Error (Exceeding)\",\n        value:\n          rawData.average_percentage_error_exceeding != null\n            ? rawData.average_percentage_error_exceeding.toFixed(2)\n            : \"N/A\",\n        status: \"Alert\",\n      },\n      {\n        rowKey: \"kstest\",\n        value: driftMetrics.ks_statistic?.toFixed(3) ?? \"N/A\",\n        status: \"Normal\",\n      },\n      {\n        rowKey: \"wasserstein\",\n        value: driftMetrics.wasserstein_distance?.toFixed(3) ?? \"N/A\",\n        status: \"Normal\",\n      },\n      {\n        rowKey: \"mseRef\",\n        value: driftMetrics.mean_mse_reference?.toFixed(3) ?? \"N/A\",\n        status: \"Normal\",\n      },\n      {\n        rowKey: \"mseCurrent\",\n        value: driftMetrics.mean_mse_current?.toFixed(3) ?? \"N/A\",\n        status: \"Normal\",\n      },\n      {\n        rowKey: \"status\",\n        value: driftDetected ? \"Warning\" : \"Normal\",\n        status: driftDetected ? \"Warning\" : \"Normal\",\n      },\n    ]\n\n    // 5. Map filtered_data => tableData\n    const filtered_data = rawData.filtered_data ?? []\n    const tableData: TableDataPoint[] = filtered_data.map((item: any) => {\n      const abs_curr_per = item.abs_curr_per ?? 0\n      const abs_ref_per = item.abs_ref_per ?? 0\n      const diff = abs_curr_per - abs_ref_per\n      return {\n        id: String(item.id ?? \"\"),\n        timePeriod: item.period ?? \"\",\n        abs_curr_per,\n        abs_ref_per,\n        difference: diff,\n        status: diff > 0 ? \"Alert\" : \"Normal\",\n      }\n    })\n\n    // 6. Build errors object\n    const errors = {\n      plotData: (rawData.id_error ?? []).map((item: any) => ({\n        x: String(item.id ?? \"\"),\n        y: item.Mean_Prediction_Error ?? 0,\n        exceedsThreshold:\n          Math.abs(item.Mean_Prediction_Error ?? 0) >\n          (rawData.error_percentage_threshold ?? 0),\n      })),\n      tableData:\n        tableData.length > 0\n          ? tableData\n          : (rawData.id_error ?? []).map((item: any) => ({\n              id: String(item.id ?? \"\"),\n              timePeriod: item.time_period ?? \"\",\n              meanPrediction: item.Mean_Prediction_Error ?? 0,\n              error: item.Mean_Prediction_Error ?? 0,\n              percentageError: Math.abs(item.Mean_Prediction_Error ?? 0),\n              status:\n                Math.abs(item.Mean_Prediction_Error ?? 0) >\n                (rawData.error_percentage_threshold ?? 0)\n                  ? \"Alert\"\n                  : \"Normal\",\n            })),\n    }\n\n    // 7. Outlets exceeding threshold\n    const outletsExceedingThreshold: OutletsExceedingThreshold[] =\n      (rawData.outlets_exceeding_threshold ?? []).map((item: any) => ({\n        id: String(item.id ?? \"\"),\n        y_true: item.y_true ?? 0,\n        y_pred: item.y_pred ?? 0,\n        percentage_error: item.percentage_error ?? 0,\n      }))\n\n    // 8. MSE trend\n    const mse_trend: MSETrend[] = (rawData.mse_trend ?? []).map((item: any) => ({\n      MSE:\n        typeof item.MSE === \"number\"\n          ? item.MSE\n          : typeof item.mse === \"number\"\n          ? item.mse\n          : 0,\n      time_period: item.time_period ?? item.timePeriod ?? \"\",\n    }))\n\n    // 9. XAI explanation and periods\n    const xaiExplanation = rawData.explanation ?? \"No explanation available\"\n    const currentPeriod = rawData.current_period ?? rawData.currentPeriod ?? \"N/A\"\n    const error_percentage_threshold = rawData.error_percentage_threshold ?? 0\n\n    // 10. Compute status distribution for pie chart\n    const threshold = error_percentage_threshold\n    const warningThreshold = threshold * 0.8\n    let goodCount = 0\n    let warningCount = 0\n    let errorCount = 0\n\n    const allTableRows = errors.tableData\n    interface TableRowWithDifference {\n      difference?: number\n      percentageError?: number\n    }\n\n    (allTableRows as TableRowWithDifference[]).forEach((row: TableRowWithDifference) => {\n      const errVal =\n      Math.abs(row.difference ?? row.percentageError ?? 0)\n      if (errVal >= threshold) {\n      errorCount++\n      } else if (errVal >= warningThreshold) {\n      warningCount++\n      } else {\n      goodCount++\n      }\n    })\n\n    const total = Math.max(goodCount + warningCount + errorCount, 1)\n    const good = Math.round((goodCount / total) * 100)\n    const warning = Math.round((warningCount / total) * 100)\n    const error = 100 - good - warning\n\n    const status_distribution: StatusDistribution = { good, warning, error }\n\n    return {\n      kpis,\n      errors,\n      outletsExceedingThreshold,\n      xaiExplanation,\n      currentPeriod,\n      referencePeriod,\n      error_percentage_threshold,\n      dashboardData,\n      all_outlets: rawData.all_outlets ?? [],\n      mse_trend,\n      sorted_periods,\n      driftDetected,\n      filtered_data,\n      status_distribution,\n    }\n  } catch (err) {\n    console.error(\"Error fetching data:\", err)\n    throw new Error(\"Failed to fetch and process data\")\n  }\n}\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;AAgFtB,eAAe,UACpB,EAAE,OAAO,EAAuB,GAAG;IAAE,SAAS;AAAG,CAAC;IAElD,IAAI;QACF,sBAAsB;QACtB,MAAM,OAAO,MAAM,MAAM,CAAC,eAAe,EAAE,UAAU,CAAC,SAAS,EAAE,SAAS,GAAG,IAAI,EAAE;YACjF,aAAa;QACf;QACA,IAAI,CAAC,KAAK,EAAE,EAAE;YACZ,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,KAAK,MAAM,EAAE;QACtD;QACA,MAAM,UAAe,MAAM,KAAK,IAAI;QAEpC,4BAA4B;QAC5B,MAAM,WAAW,MAAM,MAAM,CAAC,eAAe,CAAC;QAC9C,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,4CAA4C,EAAE,SAAS,MAAM,EAAE;QAClF;QACA,MAAM,gBAA+B,MAAM,SAAS,IAAI;QAExD,2BAA2B;QAC3B,MAAM,eAAe,QAAQ,WAAW,EAAE,WAAW,CAAC;QACtD,MAAM,gBAAgB,QAAQ,WAAW,EAAE,kBAAkB;QAC7D,MAAM,iBAA2B,QAAQ,cAAc,IAAI,EAAE;QAC7D,MAAM,kBAAkB,eAAe,MAAM,GAAG,IAAI,cAAc,CAAC,EAAE,GAAG;QAExE,oBAAoB;QACpB,MAAM,OAAc;YAClB;gBACE,QAAQ;gBACR,OAAO,gBAAgB,QAAQ;gBAC/B,QAAQ,gBAAgB,UAAU;YACpC;YACA;gBACE,QAAQ;gBACR,OAAO,OAAO,QAAQ,0BAA0B,IAAI;gBACpD,QAAQ;YACV;YACA;gBACE,QAAQ;gBACR,OACE,QAAQ,4BAA4B,IAAI,OACpC,QAAQ,4BAA4B,CAAC,OAAO,CAAC,KAC7C;gBACN,QAAQ;YACV;YACA;gBACE,QAAQ;gBACR,OACE,QAAQ,kCAAkC,IAAI,OAC1C,QAAQ,kCAAkC,CAAC,OAAO,CAAC,KACnD;gBACN,QAAQ;YACV;YACA;gBACE,QAAQ;gBACR,OAAO,aAAa,YAAY,EAAE,QAAQ,MAAM;gBAChD,QAAQ;YACV;YACA;gBACE,QAAQ;gBACR,OAAO,aAAa,oBAAoB,EAAE,QAAQ,MAAM;gBACxD,QAAQ;YACV;YACA;gBACE,QAAQ;gBACR,OAAO,aAAa,kBAAkB,EAAE,QAAQ,MAAM;gBACtD,QAAQ;YACV;YACA;gBACE,QAAQ;gBACR,OAAO,aAAa,gBAAgB,EAAE,QAAQ,MAAM;gBACpD,QAAQ;YACV;YACA;gBACE,QAAQ;gBACR,OAAO,gBAAgB,YAAY;gBACnC,QAAQ,gBAAgB,YAAY;YACtC;SACD;QAED,oCAAoC;QACpC,MAAM,gBAAgB,QAAQ,aAAa,IAAI,EAAE;QACjD,MAAM,YAA8B,cAAc,GAAG,CAAC,CAAC;YACrD,MAAM,eAAe,KAAK,YAAY,IAAI;YAC1C,MAAM,cAAc,KAAK,WAAW,IAAI;YACxC,MAAM,OAAO,eAAe;YAC5B,OAAO;gBACL,IAAI,OAAO,KAAK,EAAE,IAAI;gBACtB,YAAY,KAAK,MAAM,IAAI;gBAC3B;gBACA;gBACA,YAAY;gBACZ,QAAQ,OAAO,IAAI,UAAU;YAC/B;QACF;QAEA,yBAAyB;QACzB,MAAM,SAAS;YACb,UAAU,CAAC,QAAQ,QAAQ,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,OAAc,CAAC;oBACrD,GAAG,OAAO,KAAK,EAAE,IAAI;oBACrB,GAAG,KAAK,qBAAqB,IAAI;oBACjC,kBACE,KAAK,GAAG,CAAC,KAAK,qBAAqB,IAAI,KACvC,CAAC,QAAQ,0BAA0B,IAAI,CAAC;gBAC5C,CAAC;YACD,WACE,UAAU,MAAM,GAAG,IACf,YACA,CAAC,QAAQ,QAAQ,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,OAAc,CAAC;oBAC3C,IAAI,OAAO,KAAK,EAAE,IAAI;oBACtB,YAAY,KAAK,WAAW,IAAI;oBAChC,gBAAgB,KAAK,qBAAqB,IAAI;oBAC9C,OAAO,KAAK,qBAAqB,IAAI;oBACrC,iBAAiB,KAAK,GAAG,CAAC,KAAK,qBAAqB,IAAI;oBACxD,QACE,KAAK,GAAG,CAAC,KAAK,qBAAqB,IAAI,KACvC,CAAC,QAAQ,0BAA0B,IAAI,CAAC,IACpC,UACA;gBACR,CAAC;QACT;QAEA,iCAAiC;QACjC,MAAM,4BACJ,CAAC,QAAQ,2BAA2B,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,OAAc,CAAC;gBAC9D,IAAI,OAAO,KAAK,EAAE,IAAI;gBACtB,QAAQ,KAAK,MAAM,IAAI;gBACvB,QAAQ,KAAK,MAAM,IAAI;gBACvB,kBAAkB,KAAK,gBAAgB,IAAI;YAC7C,CAAC;QAEH,eAAe;QACf,MAAM,YAAwB,CAAC,QAAQ,SAAS,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,OAAc,CAAC;gBAC1E,KACE,OAAO,KAAK,GAAG,KAAK,WAChB,KAAK,GAAG,GACR,OAAO,KAAK,GAAG,KAAK,WACpB,KAAK,GAAG,GACR;gBACN,aAAa,KAAK,WAAW,IAAI,KAAK,UAAU,IAAI;YACtD,CAAC;QAED,iCAAiC;QACjC,MAAM,iBAAiB,QAAQ,WAAW,IAAI;QAC9C,MAAM,gBAAgB,QAAQ,cAAc,IAAI,QAAQ,aAAa,IAAI;QACzE,MAAM,6BAA6B,QAAQ,0BAA0B,IAAI;QAEzE,gDAAgD;QAChD,MAAM,YAAY;QAClB,MAAM,mBAAmB,YAAY;QACrC,IAAI,YAAY;QAChB,IAAI,eAAe;QACnB,IAAI,aAAa;QAEjB,MAAM,eAAe,OAAO,SAAS;QAMpC,aAA0C,OAAO,CAAC,CAAC;YAClD,MAAM,SACN,KAAK,GAAG,CAAC,IAAI,UAAU,IAAI,IAAI,eAAe,IAAI;YAClD,IAAI,UAAU,WAAW;gBACzB;YACA,OAAO,IAAI,UAAU,kBAAkB;gBACvC;YACA,OAAO;gBACP;YACA;QACF;QAEA,MAAM,QAAQ,KAAK,GAAG,CAAC,YAAY,eAAe,YAAY;QAC9D,MAAM,OAAO,KAAK,KAAK,CAAC,AAAC,YAAY,QAAS;QAC9C,MAAM,UAAU,KAAK,KAAK,CAAC,AAAC,eAAe,QAAS;QACpD,MAAM,QAAQ,MAAM,OAAO;QAE3B,MAAM,sBAA0C;YAAE;YAAM;YAAS;QAAM;QAEvE,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA,aAAa,QAAQ,WAAW,IAAI,EAAE;YACtC;YACA;YACA;YACA;YACA;QACF;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/fe/octave-drift-detection/src/services/dashboardService.ts"],"sourcesContent":["/**\n * Shared typings\n * -------------------------------------------------------------------------- */\nexport interface Entry {\n  user: string\n  Runtime: string\n  BusinessUnit: string\n  useCase: string\n  ShortCode: string\n  JSONLink: string\n  alertKeeper: string\n}\n\nexport interface EntriesTableFilter {\n  user?: string\n  Runtime?: string\n  BusinessUnit?: string\n  useCase?: string\n  ShortCode?: string\n  JSONLink?: string\n  alertKeeper?: string          // single name – e.g. \"Kalpa\"\n}\n\n/**\n * Utility helpers\n * -------------------------------------------------------------------------- */\nconst eq = (a?: string, b?: string) =>\n  a !== undefined && b !== undefined ? a.toLowerCase() === b.toLowerCase() : true\n\n/**\n * Fetch the entries table from the API and **return only the rows that match\n * the supplied `filters` object**.  \n *\n * The API is *supposed* to filter server‑side, but we’ve seen it sometimes\n * return the full table (all business units, use‑cases, etc.).  To guarantee\n * correctness we:\n *\n *  1. Pass the query‑string parameters that mirror `filters`.\n *  2. Apply the same filters again in the client, so the caller *always* gets\n *     the precise subset it asked for, even if the backend forgets.\n */\nexport async function fetchEntriesTable(\n  filters: EntriesTableFilter = {},\n): Promise<Entry[]> {\n  /* ------------------------------------------------------------------ */\n  /* 1️⃣  Build the query string we’ll send to the server                */\n  /* ------------------------------------------------------------------ */\n  const params = new URLSearchParams()\n  if (filters.user)         params.append('user',         filters.user)\n  if (filters.Runtime)      params.append('Runtime',      filters.Runtime)\n  if (filters.BusinessUnit) params.append('BusinessUnit', filters.BusinessUnit)\n  if (filters.useCase)      params.append('useCase',      filters.useCase)\n  if (filters.ShortCode)    params.append('ShortCode',    filters.ShortCode)\n  if (filters.JSONLink)     params.append('JSONLink',     filters.JSONLink)\n  if (filters.alertKeeper)  params.append('alertKeeper',  filters.alertKeeper)\n\n  /* ------------------------------------------------------------------ */\n  /* 2️⃣  Fetch from the API                                             */\n  /* ------------------------------------------------------------------ */\n  const res = await fetch(`/api/entries-table?${params.toString()}`, {\n    credentials: 'include',\n  })\n\n  if (!res.ok) {\n    throw new Error(`Failed to fetch entries table: ${res.status} ${res.statusText}`)\n  }\n\n  const allRows: Entry[] = await res.json()\n\n  /* ------------------------------------------------------------------ */\n  /* 3️⃣  Apply the same filters client‑side (safety‑net)                */\n  /* ------------------------------------------------------------------ */\n  const rows = allRows.filter((e) => {\n    if (filters.user         && !eq(e.user,          filters.user        )) return false\n    if (filters.Runtime      &&  e.Runtime         !== filters.Runtime     ) return false\n    if (filters.BusinessUnit && !eq(e.BusinessUnit, filters.BusinessUnit)) return false\n    if (filters.useCase      && !eq(e.useCase,      filters.useCase     )) return false\n    if (filters.ShortCode    &&  e.ShortCode       !== filters.ShortCode   ) return false\n    if (filters.JSONLink     &&  e.JSONLink        !== filters.JSONLink    ) return false\n\n    /* alertKeeper: treat it as a comma‑separated list in the source    */\n    if (filters.alertKeeper) {\n      const keepers = e.alertKeeper\n        .split(',')\n        .map((s) => s.trim().toLowerCase())\n      if (!keepers.includes(filters.alertKeeper.toLowerCase())) return false\n    }\n\n    return true\n  })\n\n  return rows\n}\n"],"names":[],"mappings":"AAAA;;8EAE8E;;;AAqB9E;;8EAE8E,GAC9E,MAAM,KAAK,CAAC,GAAY,IACtB,MAAM,aAAa,MAAM,YAAY,EAAE,WAAW,OAAO,EAAE,WAAW,KAAK;AActE,eAAe,kBACpB,UAA8B,CAAC,CAAC;IAEhC,sEAAsE,GACtE,uEAAuE,GACvE,sEAAsE,GACtE,MAAM,SAAS,IAAI;IACnB,IAAI,QAAQ,IAAI,EAAU,OAAO,MAAM,CAAC,QAAgB,QAAQ,IAAI;IACpE,IAAI,QAAQ,OAAO,EAAO,OAAO,MAAM,CAAC,WAAgB,QAAQ,OAAO;IACvE,IAAI,QAAQ,YAAY,EAAE,OAAO,MAAM,CAAC,gBAAgB,QAAQ,YAAY;IAC5E,IAAI,QAAQ,OAAO,EAAO,OAAO,MAAM,CAAC,WAAgB,QAAQ,OAAO;IACvE,IAAI,QAAQ,SAAS,EAAK,OAAO,MAAM,CAAC,aAAgB,QAAQ,SAAS;IACzE,IAAI,QAAQ,QAAQ,EAAM,OAAO,MAAM,CAAC,YAAgB,QAAQ,QAAQ;IACxE,IAAI,QAAQ,WAAW,EAAG,OAAO,MAAM,CAAC,eAAgB,QAAQ,WAAW;IAE3E,sEAAsE,GACtE,uEAAuE,GACvE,sEAAsE,GACtE,MAAM,MAAM,MAAM,MAAM,CAAC,mBAAmB,EAAE,OAAO,QAAQ,IAAI,EAAE;QACjE,aAAa;IACf;IAEA,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,IAAI,MAAM,CAAC,CAAC,EAAE,IAAI,UAAU,EAAE;IAClF;IAEA,MAAM,UAAmB,MAAM,IAAI,IAAI;IAEvC,sEAAsE,GACtE,uEAAuE,GACvE,sEAAsE,GACtE,MAAM,OAAO,QAAQ,MAAM,CAAC,CAAC;QAC3B,IAAI,QAAQ,IAAI,IAAY,CAAC,GAAG,EAAE,IAAI,EAAW,QAAQ,IAAI,GAAW,OAAO;QAC/E,IAAI,QAAQ,OAAO,IAAU,EAAE,OAAO,KAAa,QAAQ,OAAO,EAAO,OAAO;QAChF,IAAI,QAAQ,YAAY,IAAI,CAAC,GAAG,EAAE,YAAY,EAAE,QAAQ,YAAY,GAAG,OAAO;QAC9E,IAAI,QAAQ,OAAO,IAAS,CAAC,GAAG,EAAE,OAAO,EAAO,QAAQ,OAAO,GAAQ,OAAO;QAC9E,IAAI,QAAQ,SAAS,IAAQ,EAAE,SAAS,KAAW,QAAQ,SAAS,EAAK,OAAO;QAChF,IAAI,QAAQ,QAAQ,IAAS,EAAE,QAAQ,KAAY,QAAQ,QAAQ,EAAM,OAAO;QAEhF,oEAAoE,GACpE,IAAI,QAAQ,WAAW,EAAE;YACvB,MAAM,UAAU,EAAE,WAAW,CAC1B,KAAK,CAAC,KACN,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI,GAAG,WAAW;YAClC,IAAI,CAAC,QAAQ,QAAQ,CAAC,QAAQ,WAAW,CAAC,WAAW,KAAK,OAAO;QACnE;QAEA,OAAO;IACT;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///workspaces/fe/octave-drift-detection/src/components/Markdown.tsx"],"sourcesContent":["// components/Markdown.tsx\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport rehypeRaw from 'rehype-raw'\n\nexport function Markdown({ content }: { content: string }) {\n  return (\n    <ReactMarkdown\n      children={content}\n      rehypePlugins={[rehypeRaw]}\n    />\n  )\n}\n"],"names":[],"mappings":"AAAA,0BAA0B;;;;;AAE1B;AACA;;;;AAEO,SAAS,SAAS,EAAE,OAAO,EAAuB;IACvD,qBACE,8OAAC,wLAAA,CAAA,UAAa;QACZ,UAAU;QACV,eAAe;YAAC,6IAAA,CAAA,UAAS;SAAC;;;;;;AAGhC","debugId":null}}]
}